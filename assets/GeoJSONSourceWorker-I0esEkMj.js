import{bd as _,s as I,be as $,bf as Q,bg as v,bh as Z,a5 as A,t as P,aj as G,U as M,aI as R}from"./index-BdXiYUWp.js";import{o as N,r as z,e as U,n as B,t as H}from"./featureConversionUtils-DtkYhb8p.js";import{m as J}from"./FeatureStore-50tEO_c6.js";import{x as E,j as b}from"./queryUtils-CgPWEskM.js";import{V as L}from"./QueryEngine-B-nK66hP.js";import{I as V,N as W,E as K}from"./geojson-DGrPXOW2.js";import{l as Y,a as X,u as ee}from"./clientSideDefaults-Cj_-RsjD.js";import{j as te,p as T,d as w,f as F,y as O}from"./sourceUtils-DL2AeTCC.js";import{Z as k}from"./FieldsIndex-C2YFsm16.js";import{i as ie}from"./fieldType-D7m7V0MI.js";import"./OptimizedFeature-D3320lj0.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./BoundsStore-C2SLbA1i.js";import"./PooledRBush-Dzo3tHFi.js";import"./quickselect-QQC62dOK.js";import"./optimizedFeatureQueryEngineAdapter-BNIW_2c8.js";import"./projection-sPm_KXQG.js";import"./projectBuffer-CHV26hzf.js";import"./zscale-Q26ExEVF.js";import"./normalizeUtils-BACmLuYb.js";import"./normalizeUtilsCommon-DnAXcLGn.js";import"./utils-Bh8BC7JY.js";import"./utils-BllU-TlI.js";import"./json-Wa8cmqdu.js";import"./LRUCache-C1crbGkZ.js";import"./WhereClause-CUN6niip.js";import"./TimeOnly-B9qcafr2.js";import"./QueryEngineCapabilities-DjYb9CEb.js";import"./heatmapUtils-BHUsg2yN.js";import"./vec42-CwZz9wN3.js";import"./common-DokbeE9L.js";import"./vec4f64-CMoMXWBi.js";import"./utils-Cs9HxxWA.js";import"./TimeExtent-DKc53fFR.js";import"./Basemap-i939BHWI.js";import"./loadAll-PsZWmoYu.js";import"./PortalItem-B5IuGMHV.js";import"./writeUtils-CJx3vx4w.js";import"./layerUtils-CRmrchQW.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-BmVJLnp_.js";import"./utils-Citvw9BJ.js";import"./ClassBreaksDefinition-B7ob1ckT.js";import"./signal-CvI5YkrC.js";import"./time-ClENgjgA.js";import"./date-Ctp1FiBW.js";import"./capabilities-D6exRNM4.js";import"./defaultsJSON-GKolV7NZ.js";const se={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsQueryWithCacheHint:!0,supportsQueryWithDistance:!0,supportsQueryWithResultType:!0,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class Xe{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const r=[],[i]=await Promise.all([e.url?this._fetch(t==null?void 0:t.signal):null,this._checkProjection(e.spatialReference)]),s=V(i,{geometryType:e.geometryType}),o=e.fields||s.fields||[],d=e.hasZ!=null?e.hasZ:s.hasZ,p=s.geometryType;let c=e.objectIdField||s.objectIdFieldName||"__OBJECTID";const h=e.spatialReference||_;let n=e.timeInfo;o===s.fields&&s.unknownFields.length>0&&r.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:s.unknownFields}});const u=new k(o);let l=u.get(c);l?(l.type!=="esriFieldTypeString"&&(l.type="esriFieldTypeOID"),l.editable=!1,l.nullable=!1,c=l.name):(l={alias:c,name:c,type:s.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},o.unshift(l));const y={};for(const a of o){if(a.name==null&&(a.name=a.alias),a.alias==null&&(a.alias=a.name),!a.name)throw new I("geojson-layer:invalid-field-name","field name is missing",{field:a});if(!ie.jsonValues.includes(a.type))throw new I("geojson-layer:invalid-field-type",`invalid type for field "${a.name}"`,{field:a});if(a.name!==l.name){const g=$(a);g!==void 0&&(y[a.name]=g)}a.length==null&&(a.length=Q(a))}if(n){if(n.startTimeField){const a=u.get(n.startTimeField);a?(n.startTimeField=a.name,a.type="esriFieldTypeDate"):n.startTimeField=null}if(n.endTimeField){const a=u.get(n.endTimeField);a?(n.endTimeField=a.name,a.type="esriFieldTypeDate"):n.endTimeField=null}if(n.trackIdField){const a=u.get(n.trackIdField);a?n.trackIdField=a.name:(n.trackIdField=null,r.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:n}}))}n.startTimeField||n.endTimeField||(r.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:n}}),n=null)}const m=p?ee(p):void 0,j=u.dateFields.length?{timeZoneIANA:v}:null,f={warnings:r,featureErrors:[],layerDefinition:{...se,drawingInfo:m??void 0,templates:Y(y),extent:void 0,geometryType:p,objectIdField:c,fields:o,hasZ:!!d,timeInfo:n,dateFieldsTimeReference:j}};this._queryEngine=new L({fieldsIndex:k.fromLayerJSON({fields:o,timeInfo:n,dateFieldsTimeReference:j}),geometryType:p,hasM:!1,hasZ:d,objectIdField:c,spatialReference:h,timeInfo:n,featureStore:new J({geometryType:p,hasM:!1,hasZ:d})});const q=this._queryEngine.fieldsIndex.requiredFields.indexOf(l);q>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(q,1),this._createDefaultAttributes=X(y,c);const x=await this._createFeatures(i);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,x);const C=this._normalizeFeatures(x,f.featureErrors);this._queryEngine.featureStore.addMany(C);const{fullExtent:D,timeExtent:S}=await this._queryEngine.fetchRecomputedExtents();if(f.layerDefinition.extent=D,S){const{start:a,end:g}=S;f.layerDefinition.timeInfo.timeExtent=[a,g]}return f}async applyEdits(e){const{spatialReference:t,geometryType:r}=this._queryEngine;return await Promise.all([te(t,r),E(e.adds,t),E(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){var i;this._loadOptions.customParameters=e,(i=this._snapshotTask)==null||i.abort(),this._snapshotTask=Z(this._snapshotFeatures),this._snapshotTask.promise.then(s=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,s);const o=this._normalizeFeatures(s);o&&this._queryEngine.featureStore.addMany(o)},s=>{this._queryEngine.featureStore.clear(),A(s)||P.getLogger("esri.layers.GeoJSONLayer").error(new I("geojson-layer:refresh","An error occurred during refresh",{error:s}))}),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:r}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:r}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:r,objectIdField:i}=this._queryEngine,s=W(e,{geometryType:t,hasZ:r,objectIdField:i});if(!G(this._queryEngine.spatialReference,_))for(const o of s)o.geometry!=null&&(o.geometry=N(b(z(o.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),_,this._queryEngine.spatialReference)));return s}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:r}=this._loadOptions,i=(await M(t??"",{responseType:"json",query:{...r},signal:e})).data;return K(i),i}_normalizeFeatures(e,t){const{objectIdField:r,fieldsIndex:i}=this._queryEngine,s=[];for(const o of e){const d=this._createDefaultAttributes(),p=T(i,d,o.attributes,!0);p?t==null||t.push(p):(this._assignObjectId(d,o.attributes,!0),o.attributes=d,o.objectId=d[r],s.push(o))}return s}async _applyEdits(e){const{adds:t,updates:r,deletes:i}=e,s={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t!=null&&t.length&&this._applyAddEdits(s,t),r!=null&&r.length&&this._applyUpdateEdits(s,r),i==null?void 0:i.length){for(const p of i)s.deleteResults.push(w(p));this._queryEngine.featureStore.removeManyById(i)}const{fullExtent:o,timeExtent:d}=await this._queryEngine.fetchRecomputedExtents();return{extent:o,timeExtent:d,featureEditResults:s}}_applyAddEdits(e,t){const{addResults:r}=e,{geometryType:i,hasM:s,hasZ:o,objectIdField:d,spatialReference:p,featureStore:c,fieldsIndex:h}=this._queryEngine,n=[];for(const u of t){if(u.geometry&&i!==R(u.geometry)){r.push(F("Incorrect geometry type."));continue}const l=this._createDefaultAttributes(),y=T(h,l,u.attributes);if(y)r.push(y);else{if(this._assignObjectId(l,u.attributes),u.attributes=l,u.uid!=null){const m=u.attributes[d];e.uidToObjectId[u.uid]=m}if(u.geometry!=null){const m=u.geometry.spatialReference??p;u.geometry=b(O(u.geometry,m),m,p)}n.push(u),r.push(w(u.attributes[d]))}}c.addMany(U([],n,i,o,s,d))}_applyUpdateEdits({updateResults:e},t){const{geometryType:r,hasM:i,hasZ:s,objectIdField:o,spatialReference:d,featureStore:p,fieldsIndex:c}=this._queryEngine;for(const h of t){const{attributes:n,geometry:u}=h,l=n==null?void 0:n[o];if(l==null){e.push(F(`Identifier field ${o} missing`));continue}if(!p.has(l)){e.push(F(`Feature with object id ${l} missing`));continue}const y=B(p.getFeature(l),r,s,i);if(u!=null){if(r!==R(u)){e.push(F("Incorrect geometry type."));continue}const m=u.spatialReference??d;y.geometry=b(O(u,m),m,d)}if(n){const m=T(c,y.attributes,n);if(m){e.push(m);continue}}p.add(H(y,r,s,i,o)),e.push(w(l))}}_createObjectIdGenerator(e,t){const r=e.fieldsIndex.get(e.objectIdField);if(r.type==="esriFieldTypeString")return()=>r.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const s of t)s.objectId&&(i=Math.max(i,s.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(e,t,r=!1){const i=this._queryEngine.objectIdField;e[i]=r&&i in t?t[i]:this._objectIdGenerator()}async _checkProjection(e){try{await E(_,e)}catch{throw new I("geojson-layer","Projection not supported")}}}export{Xe as default};
