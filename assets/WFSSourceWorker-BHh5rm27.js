import{s as f,a4 as c,bg as S,bh as E,t as g,T as y,a5 as R,aj as P}from"./index-BdXiYUWp.js";import{o as q,r as I}from"./featureConversionUtils-DtkYhb8p.js";import{m as b}from"./FeatureStore-50tEO_c6.js";import{x as j,j as $}from"./queryUtils-CgPWEskM.js";import{V as N}from"./QueryEngine-B-nK66hP.js";import{E as O,N as Q}from"./geojson-DGrPXOW2.js";import{p as M}from"./sourceUtils-DL2AeTCC.js";import{o as k,e as L,K as _}from"./wfsUtils-CbRTvJ7K.js";import{Z as U}from"./FieldsIndex-C2YFsm16.js";import"./OptimizedFeature-D3320lj0.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./BoundsStore-C2SLbA1i.js";import"./PooledRBush-Dzo3tHFi.js";import"./quickselect-QQC62dOK.js";import"./optimizedFeatureQueryEngineAdapter-BNIW_2c8.js";import"./projection-sPm_KXQG.js";import"./projectBuffer-CHV26hzf.js";import"./zscale-Q26ExEVF.js";import"./normalizeUtils-BACmLuYb.js";import"./normalizeUtilsCommon-DnAXcLGn.js";import"./utils-Bh8BC7JY.js";import"./utils-BllU-TlI.js";import"./json-Wa8cmqdu.js";import"./LRUCache-C1crbGkZ.js";import"./WhereClause-CUN6niip.js";import"./TimeOnly-B9qcafr2.js";import"./fieldType-D7m7V0MI.js";import"./QueryEngineCapabilities-DjYb9CEb.js";import"./heatmapUtils-BHUsg2yN.js";import"./vec42-CwZz9wN3.js";import"./common-DokbeE9L.js";import"./vec4f64-CMoMXWBi.js";import"./utils-Cs9HxxWA.js";import"./TimeExtent-DKc53fFR.js";import"./Basemap-i939BHWI.js";import"./loadAll-PsZWmoYu.js";import"./PortalItem-B5IuGMHV.js";import"./writeUtils-CJx3vx4w.js";import"./layerUtils-CRmrchQW.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-BmVJLnp_.js";import"./utils-Citvw9BJ.js";import"./ClassBreaksDefinition-B7ob1ckT.js";import"./signal-CvI5YkrC.js";import"./time-ClENgjgA.js";import"./date-Ctp1FiBW.js";import"./xmlUtils-CtUoQO7q.js";import"./arcgisLayerUrl-z_cta6mh.js";import"./Field-16BWPiq_.js";const x="esri.layers.WFSLayer";class kt{constructor(){this._customParameters=null,this._queryEngine=null,this._supportsPagination=!0}destroy(){var t;(t=this._queryEngine)==null||t.destroy(),this._queryEngine=null}async load(t,e={}){const{getFeatureUrl:r,getFeatureOutputFormat:o,fields:i,geometryType:u,featureType:s,maxRecordCount:n,maxTotalRecordCount:p,maxPageCount:C,objectIdField:d,customParameters:F}=t,{spatialReference:l,getFeatureSpatialReference:h}=k(r,s,t.spatialReference);try{await j(h,l)}catch{throw new f("unsupported-projection","Projection not supported",{inSpatialReference:h,outSpatialReference:l})}c(e),this._customParameters=F,this._featureType=s,this._fieldsIndex=U.fromLayerJSON({fields:i,dateFieldsTimeReference:i.some(T=>T.type==="esriFieldTypeDate")?{timeZoneIANA:S}:null}),this._geometryType=u,this._getFeatureUrl=r,this._getFeatureOutputFormat=o,this._getFeatureSpatialReference=h,this._maxRecordCount=n,this._maxTotalRecordCount=p,this._maxPageCount=C,this._objectIdField=d,this._spatialReference=l;let m=await this._snapshotFeatures(e);if(m.errors.length>0&&(this._supportsPagination=!1,m=await this._snapshotFeatures(e),m.errors.length>0))throw m.errors[0];return this._queryEngine=new N({fieldsIndex:this._fieldsIndex,geometryType:u,hasM:!1,hasZ:!1,objectIdField:d,spatialReference:l,timeInfo:null,featureStore:new b({geometryType:u,hasM:!1,hasZ:!1})}),this._queryEngine.featureStore.addMany(m.features),{warnings:w(m),extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async applyEdits(){throw new f("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(t,e.signal)}async queryFeatureCount(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(t,e.signal)}async queryObjectIds(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(t,e.signal)}async queryExtent(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(t,e.signal)}async querySnapping(t,e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(t,e.signal)}async refresh(t){var e;return this._customParameters=t.customParameters,this._maxRecordCount=t.maxRecordCount,this._maxTotalRecordCount=t.maxTotalRecordCount,this._maxPageCount=t.maxPageCount,(e=this._snapshotTask)==null||e.abort(),this._snapshotTask=E(r=>this._snapshotFeatures({signal:r})),this._snapshotTask.promise.then(r=>{var o;this._queryEngine.featureStore.clear(),this._queryEngine.featureStore.addMany(r.features);for(const i of w(r))g.getLogger(x).warn(new y("wfs-layer:refresh-warning",i.message,i.details));(o=r.errors)!=null&&o.length&&g.getLogger(x).warn(new y("wfs-layer:refresh-error","Refresh completed with errors",{errors:r.errors}))},()=>{this._queryEngine.featureStore.clear()}),await this._waitSnapshotComplete(),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _snapshotFeatures(t){const e=t==null?void 0:t.signal,r=this._maxTotalRecordCount,o=this._maxPageCount,i=this._supportsPagination?await L(this._getFeatureUrl,this._featureType.typeName,{customParameters:this._customParameters,signal:e}):void 0;let u=[];const s=[];if(i==null)try{u=await this._singleQuery(e)}catch(n){R(n)||s.push(n)}else{const n=Math.min(i,r),p=Z(this,Math.max(1,Math.min(Math.ceil(n/this._maxRecordCount),o)),e);await Promise.allSettled(Array.from({length:10}).map(()=>J(p,u,s)))}return c(e),{features:u,totalRecordCount:i,maxTotalRecordCount:r,maxPageCount:o,errors:s}}async _singleQuery(t){const e=await _(this._getFeatureUrl,this._featureType.typeName,this._getFeatureSpatialReference,this._getFeatureOutputFormat,{customParameters:this._customParameters,signal:t});return this._processGeoJSON(e,{signal:t})}async _pageQuery(t,e){const r=t*this._maxRecordCount,o=await _(this._getFeatureUrl,this._featureType.typeName,this._getFeatureSpatialReference,this._getFeatureOutputFormat,{customParameters:this._customParameters,startIndex:r,count:this._maxRecordCount,signal:e});return this._processGeoJSON(o,{startIndex:r,signal:e})}_processGeoJSON(t,e){O(t,this._getFeatureSpatialReference.wkid);const{startIndex:r,signal:o}=e;c(o);const i=Q(t,{geometryType:this._geometryType,hasZ:!1,objectIdField:this._objectIdField});if(!P(this._spatialReference,this._getFeatureSpatialReference))for(const s of i)s.geometry!=null&&(s.geometry=q($(I(s.geometry,this._geometryType,!1,!1),this._getFeatureSpatialReference,this._spatialReference)));let u=r??1;for(const s of i){const n={};M(this._fieldsIndex,n,s.attributes,!0),s.attributes=n,n[this._objectIdField]==null&&(s.objectId=n[this._objectIdField]=u++)}return i}}function*Z(a,t,e){for(let r=0;r<t;r++)yield a._pageQuery(r,e)}async function J(a,t,e){let r=a.next();for(;!r.done;){try{const o=await r.value;t.push(...o)}catch(o){R(o)||e.push(o)}r=a.next()}}function w(a){const t=[];return a.totalRecordCount!=null&&(a.features.length<a.totalRecordCount&&t.push({name:"wfs-layer:maxRecordCount-too-low",message:`Could only fetch ${a.features.length} of ${a.totalRecordCount} in ${a.maxPageCount} queries. Try increasing the value of WFSLayer.maxRecordCount.`,details:{recordCount:a.features.length,totalRecordCount:a.totalRecordCount}}),a.totalRecordCount>a.maxTotalRecordCount&&t.push({name:"wfs-layer:large-dataset",message:`The number of ${a.totalRecordCount} features exceeds the maximum allowed of ${a.maxTotalRecordCount}.`,details:{recordCount:a.features.length,totalRecordCount:a.totalRecordCount,maxTotalRecordCount:a.maxTotalRecordCount}})),t}export{kt as default};
