import{a4 as m,s,M as p}from"./index-DMwY2Yeh.js";import{p as n}from"./MeshVertexAttributes-Btmh60mG.js";import{B as a}from"./vertexSpaceConversion-BECAmrwW.js";import"./mat3-BBgb1kkc.js";import"./common-DokbeE9L.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4-DsYZliz4.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-wPxsRdwz.js";import"./spatialReferenceEllipsoidUtils-yf9fltjY.js";import"./computeTranslationToOriginAndRotation-D4dC5gUF.js";import"./projectBuffer-CWX1J5rk.js";import"./projectPointToVector-DyrxW77M.js";import"./projection-DL1aNLQS.js";import"./zscale-DcxcvFoT.js";import"./meshVertexSpaceUtils-BeeK2Adp.js";import"./MeshLocalVertexSpace-BLWP4h98.js";import"./vec3-Csk-Ux66.js";import"./BufferView-jEgH8diV.js";import"./vec2-DeTgPWAI.js";import"./vec42-CwZz9wN3.js";import"./vec4-BTolcP0U.js";async function g(t,o,r){await Promise.resolve(),m(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{g as convertMeshVertexSpace};
