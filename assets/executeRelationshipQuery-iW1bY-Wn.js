import{f as p}from"./utils-Sq5BbeZP.js";import{U as f,co as y}from"./index-DMwY2Yeh.js";import{t as j}from"./query-DGVkdA_t.js";import{d as R}from"./FeatureSet-1CBcRwmx.js";import{d as u}from"./labelingInfo-DW8snHub.js";import"./normalizeUtils-tYwCoEfv.js";import"./normalizeUtilsCommon-Dh7MTQbs.js";import"./utils-BQm91vBd.js";import"./pbfQueryUtils-Bfqgmmlw.js";import"./pbf-CFjYlUkv.js";import"./OptimizedFeature-D3320lj0.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-C4tBtOnP.js";import"./zscale-DcxcvFoT.js";import"./Field-FlLvuz43.js";import"./fieldType-C6h0mWzJ.js";import"./labelUtils-C913L2yL.js";import"./uuid-Cl5lrJ4c.js";import"./Query-Dd46G94Q.js";import"./TimeExtent-D_QVyVxF.js";import"./layerUtils-Co4QOtAn.js";import"./jsonUtils-h7tU0Uer.js";import"./UniqueValueRenderer-BWeIsITM.js";import"./RendererLegendOptions-wLw-yCIt.js";import"./diffUtils-BNvOWYG7.js";import"./enums-BoehirYs.js";import"./colorRamps-D2x6Yad2.js";import"./compilerUtils-RCjhmI8-.js";import"./lengthUtils-DPy0fDMV.js";import"./styleUtils-BSN3jcA_.js";import"./defaults-BtwZGStO.js";import"./defaultsJSON-GKolV7NZ.js";import"./LRUCache-BZgFsCAB.js";import"./Version-DMGHCpYW.js";import"./FieldsIndex-Bpsh9sfE.js";import"./colorUtils-BPNTvscP.js";import"./vec42-CwZz9wN3.js";import"./common-DokbeE9L.js";import"./vec4f64-CMoMXWBi.js";import"./heatmapUtils-BzMZhmln.js";function F(e,o){const t=e.toJSON();return t.objectIds&&(t.objectIds=t.objectIds.join(",")),t.orderByFields&&(t.orderByFields=t.orderByFields.join(",")),t.outFields&&!(o!=null&&o.returnCountOnly)?t.outFields.includes("*")?t.outFields="*":t.outFields=t.outFields.join(","):delete t.outFields,t.outSR&&(t.outSR=y(t.outSR)),t.dynamicDataSource&&(t.layer=JSON.stringify({source:t.dynamicDataSource}),delete t.dynamicDataSource),t}async function b(e,o,t){const i=await l(e,o,t),r=i.data,a=r.geometryType,n=r.spatialReference,s={};for(const c of r.relatedRecordGroups){const m={fields:void 0,objectIdFieldName:void 0,geometryType:a,spatialReference:n,hasZ:!!r.hasZ,hasM:!!r.hasM,features:c.relatedRecords};if(c.objectId!=null)s[c.objectId]=m;else for(const d of Object.keys(c))d!=="relatedRecords"&&(s[c[d]]=m)}return{...i,data:s}}async function h(e,o,t){const i=await l(e,o,t,{returnCountOnly:!0}),r=i.data,a={};for(const n of r.relatedRecordGroups)n.objectId!=null&&(a[n.objectId]=n.count);return{...i,data:a}}async function l(e,o,t={},i){const r=j({...e.query,f:"json",...i,...F(o,i)});return f(e.path+"/queryRelatedRecords",{...t,query:{...t.query,...r}})}async function st(e,o,t){o=u.from(o);const i=p(e);return b(i,o,t).then(r=>{const a=r.data,n={};return Object.keys(a).forEach(s=>n[s]=R.fromJSON(a[s])),n})}async function ct(e,o,t){o=u.from(o);const i=p(e);return h(i,o,{...t}).then(r=>r.data)}export{st as executeRelationshipQuery,ct as executeRelationshipQueryForCount};
