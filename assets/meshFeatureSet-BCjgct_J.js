import{t as h,cc as l,w as y,g as S,as as g}from"./index-BdXiYUWp.js";import{$ as E}from"./Mesh-D-3qOtT9.js";import{i as N,a as D}from"./MeshTransform-BEcuMN4l.js";import{s as M}from"./infoFor3D-CxdEiWhp.js";import{d as w}from"./FeatureSet-DfoJg6qh.js";import{n as F,i as T}from"./meshFeatureAttributes-B6oomSIL.js";import"./imageUtils-CqlS2Jxj.js";import"./MeshVertexAttributes-BTcbSHZW.js";import"./MeshLocalVertexSpace-DdkkZkgc.js";import"./meshVertexSpaceUtils-CiT0Di1N.js";import"./vec32-CJnU2VkQ.js";import"./common-DokbeE9L.js";import"./earcut-D9gy186-.js";import"./Indices-Bp5GVgBU.js";import"./plane-CN4FxKlO.js";import"./vec42-CwZz9wN3.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./quatf64-aQ5IuZRd.js";import"./vec2f64-DA6GkJuH.js";import"./vec4f64-CMoMXWBi.js";import"./deduplicate-q-Gq9aXs.js";import"./projectPointToVector-Dr1q39Qr.js";import"./projection-sPm_KXQG.js";import"./projectBuffer-CHV26hzf.js";import"./zscale-Q26ExEVF.js";import"./vertexSpaceConversion-BE54Xxe0.js";import"./mat3-BBgb1kkc.js";import"./mat4-BmVJLnp_.js";import"./spatialReferenceEllipsoidUtils-B--TIENP.js";import"./computeTranslationToOriginAndRotation-D6Hwu015.js";import"./vec3-Cd4aRkCw.js";import"./BufferView-CxDm5c8B.js";import"./vec2-DeTgPWAI.js";import"./vec4-BPpDwnDe.js";import"./quat-DBcihcjk.js";import"./Field-16BWPiq_.js";import"./fieldType-D7m7V0MI.js";const I=()=>h.getLogger("esri.rest.support.meshFeatureSet");function ht(t,o,r){const e=r.features;r.features=[],delete r.geometryType;const s=w.fromJSON(r);if(s.geometryType="mesh",!r.assetMaps)return s;const n=b(o,r.assetMaps),a=t.sourceSpatialReference??S.WGS84,u=r.globalIdFieldName,{outFields:i}=t,c=i!=null&&i.length>0?L(i.includes("*")?null:new Set(i)):()=>({});for(const m of e){const p=O(m,u,a,o,n);s.features.push(new g({geometry:p,attributes:c(m)}))}return s}function L(t){return({attributes:o})=>{if(!o)return{};if(!t)return o;for(const r in o)t.has(r)||delete o[r];return o}}function O(t,o,r,e,s){const n=t.attributes[o],a=s.get(n);if(a==null||!t.geometry)return null;const u=F(t.attributes,r,e.transformFieldRoles),i=y.fromJSON(t.geometry);i.spatialReference=r;const c=T(t.attributes,e.transformFieldRoles),m=r.isGeographic?"local":"georeferenced",p=P(a);return p?E.createWithExternalSource(u,p,{extent:i,transform:c,vertexSpace:m,unitConversionDisabled:!0}):E.createIncomplete(u,{extent:i,transform:c,vertexSpace:m})}var f;function b(t,o){const r=new Map;for(const e of o){const s=e.parentGlobalId;if(s==null)continue;const n=e.assetName,a=e.assetType,u=e.assetHash,i=e.assetURL,c=e.conversionStatus,m=e.seqNo,p=M(a,t.supportedFormats);if(!p){I().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${a}, but it does not list it as a supported type`);continue}const d=l(r,s,()=>({files:new Map}));l(d.files,n,()=>({name:n,type:a,mimeType:p,status:$(c),parts:[]})).parts[m]={hash:u,url:i}}return r}function P(t){const o=Array.from(t.files.values()),r=new Array;for(const e of o){if(e.status!==f.COMPLETED)return null;const s=new Array;for(const n of e.parts){if(!n)return null;s.push(new N(n.url,n.hash))}r.push(new D(e.name,e.mimeType,s))}return r}function $(t){switch(t){case"COMPLETED":case"SUBMITTED":return f.COMPLETED;case"INPROGRESS":return f.PENDING;default:return f.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(f||(f={}));export{b as assetMapFromAssetMapsJSON,O as extractMesh,ht as meshFeatureSetFromJSON};
