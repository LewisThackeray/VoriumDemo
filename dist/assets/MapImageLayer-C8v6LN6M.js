import{b5 as P,X as s,Z as l,a2 as O,a6 as E,c3 as S,ca as g,co as T,U as b,w as D,s as x,a5 as F,da as I,a1 as N,a0 as _,cD as J}from"./index-DMwY2Yeh.js";import{t as M}from"./loadAll-Co2z4j4H.js";import{S as R,f as j}from"./Layer-B7MPCWr8.js";import{d as U,i as V}from"./scaleUtils-CJsMimF2.js";import{i as q}from"./APIKeyMixin-CNoRPVWe.js";import{n as A,m as k,f as C,e as L,t as H}from"./SublayersOwner-CQXkfZ-m.js";import{l as Z}from"./ArcGISService-DfIkeWvW.js";import{l as z}from"./BlendLayer-BZi4HZ3X.js";import{e as B}from"./CustomParametersMixin-D4WPrEFl.js";import{b as G}from"./OperationalLayer-DkH5aW2U.js";import{j as K}from"./PortalLayer-DdSdd8Dt.js";import{f as W}from"./RefreshableLayer-KOp797qb.js";import{t as X}from"./ScaleRangeLayer-BawLb3lW.js";import{l as Q}from"./TemporalLayer-DyyQYNf6.js";import{y as Y}from"./commonProperties-BfyFIYkl.js";import{n as ee}from"./labelUtils-C913L2yL.js";import{t as re}from"./imageBitmapUtils-CxY9yl7y.js";import{t as te}from"./versionUtils-BHPRD1Gp.js";import{p as se}from"./TimeExtent-D_QVyVxF.js";import"./Version-DMGHCpYW.js";import"./arcgisLayerUrl-C2XR9Yu_.js";import"./portalItemUtils-Doqe9RdJ.js";import"./projection-DL1aNLQS.js";import"./projectBuffer-CWX1J5rk.js";import"./zscale-DcxcvFoT.js";import"./CollectionFlattener-CDX6wnOw.js";import"./UniqueValueRenderer-BWeIsITM.js";import"./RendererLegendOptions-wLw-yCIt.js";import"./diffUtils-BNvOWYG7.js";import"./enums-BoehirYs.js";import"./colorRamps-D2x6Yad2.js";import"./compilerUtils-RCjhmI8-.js";import"./lengthUtils-DPy0fDMV.js";import"./styleUtils-BSN3jcA_.js";import"./layerUtils-Co4QOtAn.js";import"./defaults-BtwZGStO.js";import"./defaultsJSON-GKolV7NZ.js";import"./jsonUtils-h7tU0Uer.js";import"./LRUCache-BZgFsCAB.js";import"./FieldsIndex-Bpsh9sfE.js";import"./colorUtils-BPNTvscP.js";import"./vec42-CwZz9wN3.js";import"./common-DokbeE9L.js";import"./vec4f64-CMoMXWBi.js";import"./heatmapUtils-BzMZhmln.js";import"./QueryTask-C2cyxO6g.js";import"./infoFor3D-CxdEiWhp.js";import"./Query-Dd46G94Q.js";import"./Field-FlLvuz43.js";import"./fieldType-C6h0mWzJ.js";import"./utils-Sq5BbeZP.js";import"./executeQueryJSON-BzD6qpxY.js";import"./query-DGVkdA_t.js";import"./normalizeUtils-tYwCoEfv.js";import"./normalizeUtilsCommon-Dh7MTQbs.js";import"./utils-BQm91vBd.js";import"./pbfQueryUtils-Bfqgmmlw.js";import"./pbf-CFjYlUkv.js";import"./OptimizedFeature-D3320lj0.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-C4tBtOnP.js";import"./FeatureSet-1CBcRwmx.js";import"./featureConversionUtils-XDJcSzWE.js";import"./labelingInfo-DW8snHub.js";import"./uuid-Cl5lrJ4c.js";import"./FeatureType-6tQpydB5.js";import"./FeatureTemplate-BlCBJqjQ.js";import"./LayerFloorInfo-5CyudU4-.js";import"./Relationship-C-GsegB8.js";import"./serviceCapabilitiesUtils-BX5R9Pi1.js";import"./popupUtils-DpbfCD_q.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-DsYZliz4.js";import"./PortalItem-CJdFYfTh.js";import"./TimeInfo-Bc08AgQt.js";import"./ElevationInfo-BPUkZdoe.js";function $(e,r){var i;return"floorInfo"in r&&((i=r.floorInfo)!=null&&i.floorField)?ie(e,r.floorInfo.floorField):null}function ie(e,r){if(!(e!=null&&e.length))return null;const i=e.filter(t=>t!=="").map(t=>`'${t}'`);return i.push("''"),`${r} IN (${i.join(",")}) OR ${r} IS NULL`}const ae={visible:"visibleSublayers",definitionExpression:"layerDefs",labelingInfo:"hasDynamicLayers",labelsVisible:"hasDynamicLayers",opacity:"hasDynamicLayers",minScale:"visibleSublayers",maxScale:"visibleSublayers",renderer:"hasDynamicLayers",source:"hasDynamicLayers"};let u=class extends P{constructor(e){super(e),this.floors=null,this.scale=0}destroy(){this.layer=null}get dynamicLayers(){if(!this.hasDynamicLayers)return null;const e=this.visibleSublayers.map(r=>{const i=$(this.floors,r);return r.toExportImageJSON(i)});return e.length?JSON.stringify(e):null}get hasDynamicLayers(){return this.layer&&A(this.visibleSublayers,this.layer.serviceSublayers,this.layer.gdbVersion)}set layer(e){this._get("layer")!==e&&(this._set("layer",e),this.removeHandles("layer"),e&&this.addHandles([e.allSublayers.on("change",()=>this.notifyChange("visibleSublayers")),e.on("sublayer-update",r=>this.notifyChange(ae[r.propertyName]))],"layer"))}get layers(){const e=this.visibleSublayers;return e?e.length?"show:"+e.map(r=>r.id).join(","):"show:-1":null}get layerDefs(){var i;const e=!!((i=this.floors)!=null&&i.length),r=this.visibleSublayers.filter(t=>t.definitionExpression!=null||e&&t.floorInfo!=null);return r.length?JSON.stringify(r.reduce((t,o)=>{const a=$(this.floors,o),p=ee(a,o.definitionExpression);return p!=null&&(t[o.id]=p),t},{})):null}get version(){this.commitProperty("layers"),this.commitProperty("layerDefs"),this.commitProperty("dynamicLayers");const e=this.layer;return e&&(e.commitProperty("dpi"),e.commitProperty("imageFormat"),e.commitProperty("imageTransparency"),e.commitProperty("gdbVersion")),(this._get("version")||0)+1}get visibleSublayers(){const e=[];if(!this.layer)return e;const r=this.layer.sublayers,i=this.scale,t=a=>{a.visible&&(i===0||U(i,a.minScale,a.maxScale))&&(a.sublayers?a.sublayers.forEach(t):e.unshift(a))};r&&r.forEach(t);const o=this._get("visibleSublayers");return!o||o.length!==e.length||o.some((a,p)=>e[p]!==a)?e:o}toJSON(){const e=this.layer;let r={dpi:e.dpi,format:e.imageFormat,transparent:e.imageTransparency,gdbVersion:e.gdbVersion||null};return this.hasDynamicLayers&&this.dynamicLayers?r.dynamicLayers=this.dynamicLayers:r={...r,layers:this.layers,layerDefs:this.layerDefs},r}};s([l({readOnly:!0})],u.prototype,"dynamicLayers",null),s([l()],u.prototype,"floors",void 0),s([l({readOnly:!0})],u.prototype,"hasDynamicLayers",null),s([l()],u.prototype,"layer",null),s([l({readOnly:!0})],u.prototype,"layers",null),s([l({readOnly:!0})],u.prototype,"layerDefs",null),s([l({type:Number})],u.prototype,"scale",void 0),s([l({readOnly:!0})],u.prototype,"version",null),s([l({readOnly:!0})],u.prototype,"visibleSublayers",null),u=s([O("esri.layers.support.ExportImageParameters")],u);let n=class extends z(Q(X(k(C(Z(G(K(R(W(q(B(j)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new u({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(E).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const i=r.supportedImageFormatTypes;return i&&i.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,i,t){var y,f,v;if(!this.loaded||!e)return;const o=e.slice().reverse().flatten(({sublayers:m})=>m&&m.toArray().reverse()).toArray();let a=!1;const p=S(t.origin);if((y=this.capabilities)!=null&&y.operations.supportsExportMap&&((v=(f=this.capabilities)==null?void 0:f.exportMap)!=null&&v.supportsDynamicLayers)){if(p===g.PORTAL_ITEM){const m=this.createSublayersForOrigin("service").sublayers;a=L(o,m,g.SERVICE)}else if(p>g.PORTAL_ITEM){const m=this.createSublayersForOrigin("portal-item");a=L(o,m.sublayers,S(m.origin))}}const c=[],d={writeSublayerStructure:a,...t};let h=a||this.hasVisibleLayersForOrigin(p);o.forEach(m=>{const w=m.write({},d);c.push(w),h=h||m.originOf("visible")==="user"}),c.some(m=>Object.keys(m).length>1)&&(r.layers=c),h&&(r.visibleLayers=o.filter(m=>m.visible).map(m=>m.id))}createExportImageParameters(e,r,i,t){const o=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(t==null?void 0:t.floors)??null,this._exportImageParameters.scale=V({extent:e,width:r})*o;const a=this._exportImageParameters.toJSON(),p=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},c=e==null?void 0:e.spatialReference,d=T(c);a.dpi*=o;const h={};if(t!=null&&t.timeExtent){const{start:y,end:f}=t.timeExtent.toJSON();h.time=y&&f&&y===f?""+y:`${y??"null"},${f??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(h.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:d,imageSR:d,size:r+","+i,...a,...p,...h}}async fetchImage(e,r,i,t){const{data:o}=await this._fetchImage("image",e,r,i,t);return o}async fetchImageBitmap(e,r,i,t){const{data:o,url:a}=await this._fetchImage("blob",e,r,i,t);return re(o,a,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:i}=await b(this.url,r),{extent:t,fullExtent:o,timeExtent:a}=i,p=t||o;return{fullExtent:p&&D.fromJSON(p),timeExtent:a&&se.fromJSON({start:a[0],end:a[1]})}}loadAll(){return M(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return te(this,e)}async _fetchImage(e,r,i,t,o){var c,d,h;const a={responseType:e,signal:(o==null?void 0:o.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,i,t,o),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},p=this.parsedUrl.path+"/export";if(((c=a.query)==null?void 0:c.dynamicLayers)!=null&&!((h=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&h.supportsDynamicLayers))throw new x("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:a.query});try{const{data:y}=await b(p,a);return{data:y,url:p}}catch(y){throw F(y)?y:new x("mapimagelayer:image-fetch-error",`Unable to load image: ${p}`,{error:y})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:i}=await b(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});i&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){var r;return!(e==null||!((r=this.sublayersSourceJSON[e])!=null&&r.visibleLayers))}};s([l(I("dateFieldsTimeReference"))],n.prototype,"dateFieldsTimeZone",void 0),s([l({type:Boolean})],n.prototype,"datesInUnknownTimezone",void 0),s([l()],n.prototype,"dpi",void 0),s([l()],n.prototype,"gdbVersion",void 0),s([l()],n.prototype,"imageFormat",void 0),s([N("imageFormat",["supportedImageFormatTypes"])],n.prototype,"readImageFormat",null),s([l({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],n.prototype,"imageMaxHeight",void 0),s([l({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],n.prototype,"imageMaxWidth",void 0),s([l()],n.prototype,"imageTransparency",void 0),s([l({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],n.prototype,"isReference",void 0),s([l({json:{read:!1,write:!1}})],n.prototype,"labelsVisible",void 0),s([l({type:["ArcGISMapServiceLayer"]})],n.prototype,"operationalLayerType",void 0),s([l({json:{read:!1,write:!1}})],n.prototype,"popupEnabled",void 0),s([l(I("preferredTimeReference"))],n.prototype,"preferredTimeZone",void 0),s([l()],n.prototype,"sourceJSON",void 0),s([l({json:{write:{ignoreOrigin:!0}}})],n.prototype,"sublayers",void 0),s([_("sublayers",{layers:{type:[H]},visibleLayers:{type:[J]}})],n.prototype,"writeSublayers",null),s([l({type:["show","hide","hide-children"]})],n.prototype,"listMode",void 0),s([l({json:{read:!1},readOnly:!0,value:"map-image"})],n.prototype,"type",void 0),s([l(Y)],n.prototype,"url",void 0),n=s([O("esri.layers.MapImageLayer")],n);const Er=n;export{Er as default};
