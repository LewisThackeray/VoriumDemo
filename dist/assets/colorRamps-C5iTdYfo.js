import{P as C,X as r,Z as e,a2 as m,M as p,aK as d,cD as u,aD as y}from"./index-BdXiYUWp.js";let l=class extends C{constructor(t){super(t),this.type=null}};r([e({readOnly:!0,json:{read:!1,write:!0}})],l.prototype,"type",void 0),l=r([m("esri.rest.support.ColorRamp")],l);const n=l;var i;let o=i=class extends n{constructor(t){super(t),this.algorithm=null,this.fromColor=null,this.toColor=null,this.type="algorithmic"}clone(){return new i({fromColor:p(this.fromColor),toColor:p(this.toColor),algorithm:this.algorithm})}};r([d({esriCIELabAlgorithm:"cie-lab",esriHSVAlgorithm:"hsv",esriLabLChAlgorithm:"lab-lch"})],o.prototype,"algorithm",void 0),r([e({type:y,json:{type:[u],write:!0}})],o.prototype,"fromColor",void 0),r([e({type:y,json:{type:[u],write:!0}})],o.prototype,"toColor",void 0),r([e({type:["algorithmic"]})],o.prototype,"type",void 0),o=i=r([m("esri.rest.support.AlgorithmicColorRamp")],o);const c=o;var a;let s=a=class extends n{constructor(t){super(t),this.colorRamps=null,this.type="multipart"}clone(){return new a({colorRamps:p(this.colorRamps)})}};r([e({type:[c],json:{write:!0}})],s.prototype,"colorRamps",void 0),r([e({type:["multipart"]})],s.prototype,"type",void 0),s=a=r([m("esri.rest.support.MultipartColorRamp")],s);const h=s,$={key:"type",base:n,typeMap:{algorithmic:c,multipart:h}};function f(t){return t!=null&&t.type?t.type==="algorithmic"?c.fromJSON(t):t.type==="multipart"?h.fromJSON(t):null:null}export{h as a,$ as m,f as p};
