import{a4 as m,s,M as p}from"./index-BdXiYUWp.js";import{p as n}from"./MeshVertexAttributes-BTcbSHZW.js";import{B as a}from"./vertexSpaceConversion-BE54Xxe0.js";import"./mat3-BBgb1kkc.js";import"./common-DokbeE9L.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4-BmVJLnp_.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-CJnU2VkQ.js";import"./spatialReferenceEllipsoidUtils-B--TIENP.js";import"./computeTranslationToOriginAndRotation-D6Hwu015.js";import"./projectBuffer-CHV26hzf.js";import"./projectPointToVector-Dr1q39Qr.js";import"./projection-sPm_KXQG.js";import"./zscale-Q26ExEVF.js";import"./meshVertexSpaceUtils-CiT0Di1N.js";import"./MeshLocalVertexSpace-DdkkZkgc.js";import"./vec3-Cd4aRkCw.js";import"./BufferView-CxDm5c8B.js";import"./vec2-DeTgPWAI.js";import"./vec42-CwZz9wN3.js";import"./vec4-BPpDwnDe.js";async function g(t,o,r){await Promise.resolve(),m(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{g as convertMeshVertexSpace};
